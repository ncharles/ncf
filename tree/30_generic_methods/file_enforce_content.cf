#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File enforce content
# @description Enforce the content of a file
#
# @parameter file  File name to edit (absolute path on the target node)
# @parameter lines Line(s) to add in the file - if lines is a list, please use @{lines} to pass the iterator rather than iterating over each values
# @parameter enforce Enforce the file to contain only line(s) defined (true or false)
# 
# @class_prefix file_ensure_lines_present
# @class_parameter file

bundle agent file_enforce_content(file, lines, enforce)
{
  vars:
      "old_class_prefix" string => canonify("file_ensure_lines_present_${file}");
      "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"      string => canonify(join("_", "promisers"));
      "args"              slist => { "${file}", "${lines}", "${enforce}" };

    # We need to detect if lines is an iterator or a scalar
    !pass1::
      "length_list" int => length("lines");

    pass2::
      # we need to reset the value to 0, otherwise in the next call of this generic method, the previous
      # value will be reused if lines is a scalar
      "length_list" int => "0";

    islist::
      "report_string" string => join(", ", "lines");

  classes:
    !pass2::
      "islist" expression => isgreaterthan("$(length_list)", "1");

    "pass2" expression => "pass1";
    "pass1" expression => "any";


  files:
    !islist::
      "${file}"
        create        => "true",
        edit_line     => insert_lines("${lines}"),
        edit_defaults => ncf_empty_select("${enforce}"),
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    islist::
      "${file}"
        create        => "true",
        edit_line     => insert_lines("@{lines}"), # If it's a list, we don't want to iterate each time over the element
        edit_defaults => ncf_empty_select("${enforce}"),
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:
      "sanitize" usebundle => _classes_sanitize("${old_class_prefix}");
      "sanitize" usebundle => _classes_sanitize("${class_prefix}");
    !islist.pass2::
      "report" usebundle => _log("Insert content into ${file}", "${old_class_prefix}", "${class_prefix}", @{args});
    islist.pass2::
      "report" usebundle => _log("Insert content into ${file}", "${old_class_prefix}", "${class_prefix}", @{args});
}
